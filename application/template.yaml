AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  os-cloud-cwusers
  //TODO description of the aplication

  Sample SAM Template for os-cloud-cwusers

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  createCWUserFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: createUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: POST

  createCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'createCWUserFunction.Arn'
      Principal:  apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  resetPasswordCWUserFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: resetUserPassword.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: PUT

  deleteCWUserFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: deleteUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: DELETE
  
  CWUserFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Service: ['lambda.amazonaws.com', 'apigateway.amazonaws.com'] }
                    Action: ['sts:AssumeRole']
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            Policies:
              - PolicyName: cw_users_function_assume_role
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'sts:AssumeRole'
                        Resource:
                          - 'arn:aws:iam::*:role/CWUsers'

  CWUsersApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: "CWUsersApi"
      Policy: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "execute-api:Invoke",
                "Resource": "execute-api:/*/*/*",
            }
        ]
      }
  # API Authorizer
  CWUsersApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIAuthorizerFunction.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: cwusers-authorizer
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Type: TOKEN

  APIAuthorizerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambda
      MemorySize: 128
      Handler: authorizer.lambda_handler
      Role: !GetAtt CWUserFunctionRole.Arn
      Timeout: 300
      Runtime: python3.7
      FunctionName: cwusers_api_authorizer

  ApiAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'APIAuthorizerFunction.Arn'
      Principal:  apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

    
  CWUsersApiGatewayResource: 
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt CWUsersApiGatewayRestApi.RootResourceId
      PathPart: cwusers
      RestApiId: !Ref CWUsersApiGatewayRestApi


  CWUsersPOSTApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      HttpMethod: POST
      ResourceId: !Ref  CWUsersApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCWUserFunction.Arn}/invocations"
  
  
  


    
#TODO: Get api ids and add this schema to the generated apis
  #RequestValidator:
  #  Type: AWS::ApiGateway::Model
  #  Properties:
  #    ContentType: "application/json"
  #   Name: "CWUserApiValidator"
  #    Schema:
  #      $schema: "http://json-schema.org/draft-04/schema#"
  #      title: Application Json
  #      required:
  #        - token
  #        - username
  #      type: object
  #      properties:
  #        token:
  #          type: string
  #        username:
  #          type: string