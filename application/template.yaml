AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  os-cloud-cwusers
  //TODO description of the aplication

  Sample SAM Template for os-cloud-cwusers

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  createCWUser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: createUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: POST

  resetPasswordCWUser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: resetUserPassword.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: PUT

  deleteCWUser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambda
      Handler: deleteUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Events:
        CreateUser:
          Type: Api 
          Properties:
            Path: /cwuser
            Method: DELETE
  
  CWUserFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Service: ['lambda.amazonaws.com', 'apigateway.amazonaws.com'] }
                    Action: ['sts:AssumeRole']
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            Policies:
              - PolicyName: cw_users_function_assume_role
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'sts:AssumeRole'
                        Resource:
                          - 'arn:aws:iam::*:role/CWUsers'
  
  RdsOperationsApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: "CWUsersApi"
      Policy: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "execute-api:Invoke",
                "Resource": "execute-api:/*/*/*",
            }
        ]
      }
  



    
#TODO: Get api ids and add this schema to the generated apis
  #RequestValidator:
  #  Type: AWS::ApiGateway::Model
  #  Properties:
  #    ContentType: "application/json"
  #   Name: "CWUserApiValidator"
  #    Schema:
  #      $schema: "http://json-schema.org/draft-04/schema#"
  #      title: Application Json
  #      required:
  #        - token
  #        - username
  #      type: object
  #      properties:
  #        token:
  #          type: string
  #        username:
  #          type: string