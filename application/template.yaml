AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  os-cloud-cwusers
  //TODO description of the aplication

  Sample SAM Template for os-cloud-cwusers

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  createCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: createUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn

  createCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "createCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  resetPasswordCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: resetUserPassword.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn

  resetPasswordCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "resetPasswordCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  deleteCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: deleteUser.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn

  deleteCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "deleteCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  CWUserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              { Service: ["lambda.amazonaws.com", "apigateway.amazonaws.com"] }
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cw_users_function_assume_role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sts:AssumeRole"
                Resource:
                  - "arn:aws:iam::*:role/CWUsers"

  CWUsersApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "CWUsersApi"

  # API Authorizer
  CWUsersApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIAuthorizerFunction.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: cwusers-authorizer
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Type: TOKEN

  APIAuthorizerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/auth
      Handler: authorizer.lambda_handler
      Role: !GetAtt CWUserFunctionRole.Arn
      Runtime: python3.6

  ApiAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "APIAuthorizerFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  CWUsersApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt CWUsersApiGatewayRestApi.RootResourceId
      PathPart: cwusers
      RestApiId: !Ref CWUsersApiGatewayRestApi

  CWUsersPOSTApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      HttpMethod: POST
      ResourceId: !Ref CWUsersApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCWUserFunction.Arn}/invocations"
      RequestValidatorId: !Ref CWUsersApiValidator
      RequestModels: !Ref CWUsersRequestModel

  CWUsersApiValidator:
    Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: String
        RestApiId: !Ref CWUsersApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
  
  CWUsersRequestModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: "application/json"
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Schema: 
        $schema: http://json-schema.org/draft-07/schema
        $id: http://example.com/example.json
        type: object
        title: cw users schema
        description: The root schema comprises the entire JSON document.
        default: {}
        additionalProperties: true
        required:
        - username
        - accountId
        properties:
          username:
            "$id": "#/properties/username"
            type: string
            title: The Username Schema
            description: An explanation about the purpose of this instance.
            default: ''
            examples:
            - coisa
          accountId:
            "$id": "#/properties/accountId"
            type: string
            title: The Accountid Schema
            description: An explanation about the purpose of this instance.
            default: ''
            examples:
            - '123123123'

        
  CWUsersPUTApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      HttpMethod: PUT
      ResourceId: !Ref CWUsersApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resetPasswordCWUserFunction.Arn}/invocations"

  CWUsersDELETEApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      HttpMethod: DELETE
      ResourceId: !Ref CWUsersApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: DELETE
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteCWUserFunction.Arn}/invocations"

    # API Stage Deployment
  CwUsersApiGatewayBetaStageDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CWUsersPUTApiGatewayMethod
      - CWUsersPOSTApiGatewayMethod
      - CWUsersDELETEApiGatewayMethod
    Properties:
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Description: "Deploy api gateway rest api"
      StageName: "alpha"
  


#TODO: Get api ids and add this schema to the generated apis
#RequestValidator:
#  Type: AWS::ApiGateway::Model
#  Properties:
#    ContentType: "application/json"
#   Name: "CWUserApiValidator"
#    Schema:
#      $schema: "http://json-schema.org/draft-04/schema#"
#      title: Application Json
#      required:
#        - token
#        - username
#      type: object
#      properties:
#        token:
#          type: string
#        username:
#          type: string
