AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  os-cloud-cwusers
  //TODO description of the aplication

  Sample SAM Template for os-cloud-cwusers

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  UserPolicy:
    Description: Policy that regulates the cloudwatch user access to resources.
    Type: String
    Default: CloudWatchUserPolicy
  FunctionRole:
    Description: Policy that lives in foreign accounts and regulates activity of lambda functions that crud cloudwatch users.
    Type: String
    Default: CloudWatchUserFunctionRole
  SSMParameterPublicKeyName:
    Description: Name of public key used to decrypt OS authorization tokens.
    Type: String
    Default: auth-server-pub-key-dev

Resources:
  createCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: create_user.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Environment:
        Variables:
          USER_POLICY: !Ref UserPolicy
          FUNCTION_POLICY: !Ref FunctionRole

  createCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "createCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  resetPasswordCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: reser_user_password.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Environment:
          Variables:
            USER_POLICY: !Ref UserPolicy
            FUNCTION_POLICY: !Ref FunctionRole

  resetPasswordCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "resetPasswordCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  deleteCWUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: delete_user.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Environment:
        Variables:
          USER_POLICY: !Ref UserPolicy
          FUNCTION_POLICY: !Ref FunctionRole

  deleteCWUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "deleteCWUserFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  updateCWUserPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Handler: update_policy.lambda_handler
      Runtime: python3.6
      Role: !GetAtt CWUserFunctionRole.Arn
      Environment:
        Variables:
          USER_POLICY: !Ref UserPolicy
          FUNCTION_POLICY: !Ref FunctionRole

  updateCWUserPolicyFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "updateCWUserPolicyFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  CWUserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              { Service: ["lambda.amazonaws.com", "apigateway.amazonaws.com"] }
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cw_users_function_assume_role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sts:AssumeRole"
                Resource:
                  - !Sub "arn:aws:iam::*:role/${FunctionRole}"
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 'ssm:GetParameter'
              Resource:
                - !Sub 'arn:aws:ssm:eu-west-1:*:parameter/${SSMParameterPublicKeyName}'

  CWUsersApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "CWUsersApi"

  CWUsersApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIAuthorizerFunction.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: cwusers-authorizer
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Type: TOKEN

  APIAuthorizerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/auth
      Handler: authorizer.lambda_handler
      Role: !GetAtt CWUserFunctionRole.Arn
      Layers: 
        - arn:aws:lambda:eu-west-1:920101814014:layer:api-authorization-layer:1
      Runtime: python3.6
      Environment:
        Variables:
          SSM_PUBLIC_KEY_NAME: !Ref SSMParameterPublicKeyName

  ApiAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "APIAuthorizerFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CWUsersApiGatewayRestApi}/*/*"

  CloudWatchApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt CWUsersApiGatewayRestApi.RootResourceId
      PathPart: cloudwatch
      RestApiId: !Ref CWUsersApiGatewayRestApi

  AccountApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CloudWatchApiGatewayResource
      PathPart: account
      RestApiId: !Ref CWUsersApiGatewayRestApi
  
  AccountIdApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref AccountApiGatewayResource
      PathPart: "{account-id}"
      RestApiId: !Ref CWUsersApiGatewayRestApi
  
  UserApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref AccountIdApiGatewayResource
      PathPart: user
      RestApiId: !Ref CWUsersApiGatewayRestApi

  PasswordApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref UserApiGatewayResource
      PathPart: password
      RestApiId: !Ref CWUsersApiGatewayRestApi

  PolicyApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref AccountIdApiGatewayResource
      PathPart: policy
      RestApiId: !Ref CWUsersApiGatewayRestApi 

  CWUsersPUTApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      HttpMethod: PUT
      ResourceId: !Ref UserApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCWUserFunction.Arn}/invocations"
      RequestValidatorId: !Ref CWUsersApiValidator
      RequestModels: 
        application/json: !Ref CWUsersRequestModel
    

  CWUsersApiValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      Name: String
      RestApiId: !Ref CWUsersApiGatewayRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
  
  CWUsersRequestModel: 
    Type: AWS::ApiGateway::Model
    Properties: 
      RestApiId: !Ref CWUsersApiGatewayRestApi
      ContentType: "application/json"
      Description: "CWUser Request Model"
      Name: CWUserModel
      Schema: 
        "$schema": http://json-schema.org/draft-04/schema#
        type: object
        properties:
          username:
            type: string
          accountId:
            type: string
        required:
          - username

  CWUsersPATCHApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      HttpMethod: PATCH
      ResourceId: !Ref PasswordApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resetPasswordCWUserFunction.Arn}/invocations"
      RequestValidatorId: !Ref CWUsersApiValidator
      RequestModels: 
        application/json: !Ref CWUsersRequestModel
  
  CWUsersPolicyPUTApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      HttpMethod: PUT
      ResourceId: !Ref PolicyApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateCWUserPolicyFunction.Arn}/invocations"
    

  CWUsersDELETEApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      HttpMethod: DELETE
      ResourceId: !Ref UserApiGatewayResource
      RestApiId: !Ref CWUsersApiGatewayRestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CWUsersApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteCWUserFunction.Arn}/invocations"
      RequestValidatorId: !Ref CWUsersApiValidator
      RequestModels: 
        application/json: !Ref CWUsersRequestModel


  CwUsersApiGatewayBetaStageDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CWUsersPUTApiGatewayMethod
      - CWUsersPATCHApiGatewayMethod
      - CWUsersDELETEApiGatewayMethod
      - CWUsersPolicyPUTApiGatewayMethod
    Properties:
      RestApiId: !Ref CWUsersApiGatewayRestApi
      Description: "Deploy api gateway rest api"
      StageName: "alpha"
  

